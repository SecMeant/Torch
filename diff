diff --git a/Makefile b/Makefile
index ab4c724..724fe0b 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,8 @@ CC=g++
 CFLAGS=-Wextra -Wall -std=c++14
 sfmlso=-lsfml-graphics -lsfml-window -lsfml-system
 OBJS=main.o scene.o scenemanager.o texturemanager.o complexTypes.o\
-		 mainscene.o gamescene.o player.o moveable.o dynamicsprite.o
+		 mainscene.o gamescene.o player.o moveable.o dynamicsprite.o\
+		 motionsprite.o
 OBJDIR=obj
 
 ifdef ComSpec
@@ -46,6 +47,9 @@ $(OBJDIR)/texturemanager.o: TextureManager/TextureManager.cc
 $(OBJDIR)/dynamicsprite.o: TextureManager/DynamicSprite/DynamicSprite.cc
 	$(CC) -c $^ -o $@ $(CFLAGS)
 
+$(OBJDIR)/motionsprite.o: TextureManager/DynamicSprite/MotionSprite/MotionSprite.cc
+	$(CC) -c $^ -o $@ $(CFLAGS)
+
 $(OBJDIR)/player.o: Player/Player.cc
 	$(CC) -c $^ -o $@ $(CFLAGS)
 
diff --git a/Player/Player.cc b/Player/Player.cc
index ea698f6..72daff2 100644
--- a/Player/Player.cc
+++ b/Player/Player.cc
@@ -1,9 +1,20 @@
 #include "Player.hpp"
 
 Player::Player()
-:playerSprite(TextureManager::wizard_idle, 0, 47,16,22, 4, 0.1f)
+:playerSprite(this->direction)
 {
 	this->Moveable::set({300,300}, Direction::N);
+	this->playerSprite.setIdleAnimation
+		(TextureManager::wizard_idle, 0, 24,16,22, 4, 0.15f);
+	this->playerSprite.setMoveVerticalAnimation
+		(TextureManager::wizard_idle, 0, 47,16,22, 4, 0.1f);
+	this->playerSprite.setMoveHorizontalAnimation
+		(TextureManager::wizard_idle, 0, 47,16,22, 4, 0.1f);
+}
+
+void Player::changeDirection(Direction d)
+{
+	this->Moveable::direction = d;
 }
 
 void Player::draw
diff --git a/Player/Player.hpp b/Player/Player.hpp
index 53dcb8e..29bca9c 100644
--- a/Player/Player.hpp
+++ b/Player/Player.hpp
@@ -2,18 +2,21 @@
 #define PLAYER_H
 
 #include "../Interfaces/Moveable/Moveable.hpp"
-#include "../TextureManager/DynamicSprite/DynamicSprite.hpp"
+#include "../TextureManager/DynamicSprite/MotionSprite/MotionSprite.hpp"
 
 #include <stdint.h>
 
-class Player: protected Moveable
+class Player: public Moveable
 {
-private:
-	mutable DynamicSprite playerSprite;
+public:
+	mutable MotionSprite playerSprite;
 
 public:
-	void draw(sf::RenderWindow &wnd) const;
 	Player();
+
+	void changeDirection(Direction d);
+
+	void draw(sf::RenderWindow &wnd) const;
 };
 
 #endif // PLAYER_H
diff --git a/Scene/GameScene/GameScene.cc b/Scene/GameScene/GameScene.cc
index b936a07..1d2693b 100644
--- a/Scene/GameScene/GameScene.cc
+++ b/Scene/GameScene/GameScene.cc
@@ -20,7 +20,14 @@ sceneID GameScene::eventLoop()
 			if (event.type == sf::Event::MouseButtonPressed)
 				return {sceneID::mainmenu};
 
-			// TODO event handling
+			if(event.type == sf::Event::KeyPressed)
+			{
+				auto ret = this->handleKeyPressed(event);
+
+				if(ret != sceneID::none)
+					return ret;
+			}
+
 		}
 
 		this->parentWindow->clear();
@@ -31,6 +38,37 @@ sceneID GameScene::eventLoop()
 	return {sceneID::none};
 }
 
+sceneID GameScene::handleKeyPressed
+(const sf::Event &kev)
+{
+	sceneID ret = sceneID::none;
+	switch(kev.key.code)
+	{
+		case sf::Keyboard::Up:
+			this->player.changeDirection(Direction::N);
+			this->player.playerSprite.currentAnimation
+				= MotionSprite::spriteID::idle;
+			break;
+		
+		case sf::Keyboard::Left:
+			this->player.changeDirection(Direction::W);
+			this->player.playerSprite.currentAnimation
+				= MotionSprite::spriteID::moveHorizontal;
+			break;
+	
+		case sf::Keyboard::Right:
+			this->player.changeDirection(Direction::E);
+			this->player.playerSprite.currentAnimation
+				= MotionSprite::spriteID::moveHorizontal;
+			break;
+
+		default:
+			break;
+	}
+
+	return ret;
+}
+
 sceneID GameScene::switchScene()
 {
 	puts("Switching to GAMESCENE");
diff --git a/Scene/GameScene/GameScene.hpp b/Scene/GameScene/GameScene.hpp
index 35c458f..3192efa 100644
--- a/Scene/GameScene/GameScene.hpp
+++ b/Scene/GameScene/GameScene.hpp
@@ -17,6 +17,7 @@ private:
 	Player player;
 	virtual sceneID eventLoop() override;
 
+	sceneID handleKeyPressed(const sf::Event &kev);
 public:
 	explicit GameScene(const std::shared_ptr<sf::RenderWindow> &wnd);
 
diff --git a/TextureManager/DynamicSprite/DynamicSprite.cc b/TextureManager/DynamicSprite/DynamicSprite.cc
index e68e3ea..f64e5b5 100644
--- a/TextureManager/DynamicSprite/DynamicSprite.cc
+++ b/TextureManager/DynamicSprite/DynamicSprite.cc
@@ -12,7 +12,6 @@ DynamicSprite::DynamicSprite
 	this->currentFrame.setTexture(tex);
 	this->currentFrame.setTextureRect
 		(sf::IntRect(offsetX, offsetY, tWidth,tHeight));
-	this->currentFrame.setScale(2,2);
 	this->currentFrame.setPosition(300,300);
 
 	this->clock.restart();
diff --git a/TextureManager/DynamicSprite/DynamicSprite.hpp b/TextureManager/DynamicSprite/DynamicSprite.hpp
index dc141c7..51ae1f3 100644
--- a/TextureManager/DynamicSprite/DynamicSprite.hpp
+++ b/TextureManager/DynamicSprite/DynamicSprite.hpp
@@ -17,13 +17,16 @@ private:
 	SizeType texSize;
 	int32_t animPhaseNumber;
 	float cooldown;
-	sf::Sprite currentFrame;
 
 public:
+	sf::Sprite currentFrame;
+
+	DynamicSprite() = default;
+
 	DynamicSprite
 	(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
 	 int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown);
-	
+
 	void update();
 	sf::Sprite& getFrame();
 };
diff --git a/TextureManager/DynamicSprite/MotionSprite/MotionSprite.cc b/TextureManager/DynamicSprite/MotionSprite/MotionSprite.cc
new file mode 100644
index 0000000..4fb4b77
--- /dev/null
+++ b/TextureManager/DynamicSprite/MotionSprite/MotionSprite.cc
@@ -0,0 +1,55 @@
+#include "MotionSprite.hpp"
+
+MotionSprite::MotionSprite
+(const Direction &d)
+:currentAnimation(spriteID::idle), animations(), direction(d)
+{}
+
+void MotionSprite::setIdleAnimation
+(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+ int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown)
+{
+	DynamicSprite ds(tex, offsetX, offsetY, tWidth, tHeight, numberOfFrames, cooldown);
+	ds.currentFrame.setOrigin(tWidth/2.0f, tHeight/2.0f);
+	this->animations[spriteID::idle] = ds;
+}
+
+void MotionSprite::setMoveHorizontalAnimation
+(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+ int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown)
+{
+	DynamicSprite ds(tex, offsetX, offsetY, tWidth, tHeight, numberOfFrames, cooldown);
+	ds.currentFrame.setOrigin(tWidth/2.0f, tHeight/2.0f);
+	this->animations[spriteID::moveHorizontal] = ds;
+}
+
+void MotionSprite::setMoveVerticalAnimation
+(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+ int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown)
+{
+	DynamicSprite ds(tex, offsetX, offsetY, tWidth, tHeight, numberOfFrames, cooldown);
+	ds.currentFrame.setOrigin(tWidth/2.0f, tHeight/2.0f);
+	this->animations[spriteID::moveVertical] = ds;
+}
+
+void MotionSprite::applyRotation()
+{
+	if(this->direction == Direction::W)
+		this->animations[this->currentAnimation].currentFrame.setScale(-2.0f,2.0f);
+	else
+		this->animations[this->currentAnimation].currentFrame.setScale(2.0f,2.0f);
+}
+
+void MotionSprite::update()
+{
+	this->animations[this->currentAnimation].update();
+}
+
+sf::Sprite& MotionSprite::getFrame()
+{
+	this->applyRotation();
+	return this->animations[this->currentAnimation].getFrame();
+}
+
+
+
diff --git a/TextureManager/DynamicSprite/MotionSprite/MotionSprite.hpp b/TextureManager/DynamicSprite/MotionSprite/MotionSprite.hpp
new file mode 100644
index 0000000..0d89799
--- /dev/null
+++ b/TextureManager/DynamicSprite/MotionSprite/MotionSprite.hpp
@@ -0,0 +1,51 @@
+#ifndef MOTIONSPRITE_H
+#define MOTIONSPRITE_H
+
+#include "../../../utility/stdshared.hpp"
+
+#include "../DynamicSprite.hpp"
+
+#include <array>
+
+class MotionSprite
+{
+public:
+	enum spriteID: int32_t
+	{
+		idle = 0,
+		moveHorizontal = 1,
+		moveVertical = 2
+	};
+
+	spriteID currentAnimation;
+private:
+	std::array<DynamicSprite,3> animations;
+	
+	// Initialized with objects diretion
+	const Direction& direction;
+
+public:
+	explicit MotionSprite(const Direction &d);
+
+	/* Setters for initializing animations for differenet motion states */
+	void setIdleAnimation
+	(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+	 int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown);
+
+	void setMoveHorizontalAnimation
+	(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+	 int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown);
+
+	void setMoveVerticalAnimation
+	(const sf::Texture &tex, int32_t offsetX, int32_t offsetY,
+	 int32_t tWidth, int32_t tHeight, int32_t numberOfFrames, float cooldown);
+
+	// applies rotation according ro movement direction
+	void applyRotation();
+
+	// Updates state of animation to sprite
+	void update();
+	sf::Sprite& getFrame();
+};
+
+#endif // MOTIONSPRITE_H
diff --git a/TextureManager/TextureManager.hpp b/TextureManager/TextureManager.hpp
index da21146..54f5589 100644
--- a/TextureManager/TextureManager.hpp
+++ b/TextureManager/TextureManager.hpp
@@ -17,7 +17,7 @@ public:
 	static sf::Texture gamesceneBackground;
 	static sf::Texture mainsceneBackground;
 	static sf::Texture wizard_idle;
-
+	
 	static constexpr const char *defaultFontPath
 		= "./assets/font/orange_juice.ttf";
 
